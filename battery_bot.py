import psutil
import win32api
import json
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler
from config import TOKEN, CHAT_ID, DATA_FILE, CHECK_INTERVAL, MIN_CHANGE_PERCENT, EDIT_COOLDOWN, CRITICAL_LEVEL, CRITICAL_ALERT_LIFETIME

class BatteryBotData:
    def __init__(self):
        self.last_message_id = None
        self.last_percent = None
        self.last_charge_time = None
        self.last_update_timestamp = 0
        self.critical_alert_sent = False
        self.last_battery_check_timestamp = 0

    def save(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        try:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.__dict__, f, ensure_ascii=False)
        except Exception:
            pass

    @classmethod
    def load(cls):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            obj = cls()
            obj.__dict__.update(data)
            return obj
        except Exception:
            return cls()

async def update_battery_message(context: ContextTypes.DEFAULT_TYPE):
    bot_data = context.bot_data.setdefault('battery_data', BatteryBotData.load())

    now_ts = datetime.now().timestamp()
    last_check = bot_data.last_battery_check_timestamp
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–Ω–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    if last_check and now_ts - last_check > CHECK_INTERVAL * 2:
        try:
            await context.bot.send_message(chat_id=CHAT_ID, text="üí§ –ù–æ—É—Ç–±—É–∫ –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        except Exception:
            pass

    bot_data.last_battery_check_timestamp = now_ts

    battery = psutil.sensors_battery()
    if battery is None:
        return

    current_percent = battery.percent

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞
    if current_percent < CRITICAL_LEVEL and not battery.power_plugged:
        if not bot_data.critical_alert_sent:
            await send_critical_alert(context, battery)
            bot_data.critical_alert_sent = True
            bot_data.save()
        return
    elif bot_data.critical_alert_sent and (current_percent >= CRITICAL_LEVEL or battery.power_plugged):
        bot_data.critical_alert_sent = False

    should_update = (
        bot_data.last_percent is None or
        abs(current_percent - bot_data.last_percent) >= MIN_CHANGE_PERCENT or
        current_percent == 100
    )
    if should_update and now_ts - bot_data.last_update_timestamp >= EDIT_COOLDOWN:
        current_time = get_charge_time() if battery.power_plugged else None
        await send_status(context, battery)
        bot_data.last_percent = current_percent
        bot_data.last_charge_time = current_time
        bot_data.last_update_timestamp = now_ts

    bot_data.save()

async def send_status(context, battery, force=False):
    bot_data = context.bot_data['battery_data']
    status = format_battery_status(battery)
    try:
        if bot_data.last_message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=CHAT_ID,
                    message_id=bot_data.last_message_id,
                    text=status
                )
            except Exception:
                msg = await context.bot.send_message(chat_id=CHAT_ID, text=status)
                bot_data.last_message_id = msg.message_id
        else:
            msg = await context.bot.send_message(
                chat_id=CHAT_ID,
                text=status,
                disable_notification=not force
            )
            bot_data.last_message_id = msg.message_id
        bot_data.save()
    except Exception:
        pass

async def send_critical_alert(context, battery):
    text = (
        "‚ö†Ô∏è *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨ –ó–ê–†–Ø–î–ê!*\n"
        f"–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: {battery.percent}%\n"
        "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
    )
    try:
        msg = await context.bot.send_message(
            chat_id=CHAT_ID,
            text=text,
            parse_mode="Markdown",
            disable_notification=False
        )
        context.job_queue.run_once(
            delete_message,
            when=CRITICAL_ALERT_LIFETIME,
            data={"message_id": msg.message_id},
            name=f"delete_alert_{msg.message_id}"
        )
    except Exception:
        pass

async def delete_message(context: ContextTypes.DEFAULT_TYPE):
    message_id = context.job.data.get("message_id")
    try:
        await context.bot.delete_message(chat_id=CHAT_ID, message_id=message_id)
    except Exception:
        pass

def format_battery_status(battery):
    percent = battery.percent
    lines = [
        f"üîã –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞: {percent}%",
        "‚ö° –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è" if battery.power_plugged else "üîå –û—Ç –±–∞—Ç–∞—Ä–µ–∏"
    ]

    if battery.power_plugged:
        if percent < 100:
            time_sec = get_charge_time()
            if time_sec and time_sec > 0:
                lines.append(format_time(time_sec))
        else:
            lines.append("‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–æ")
    else:
        est_runtime = estimate_runtime()
        if est_runtime:
            lines.append(f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_time(est_runtime)}")

    if percent < 20 and not battery.power_plugged:
        lines.append(f"‚ö† –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥! {percent}%")

    lines.append(f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    return "\n".join(lines)

def get_charge_time():
    try:
        power_status = win32api.GetSystemPowerStatus()
        return power_status.get('BatteryLifeTime', None) if isinstance(power_status, dict) else None
    except Exception:
        return None

def estimate_runtime():
    try:
        power_status = win32api.GetSystemPowerStatus()
        if isinstance(power_status, dict) and power_status.get('BatteryLifeTime', -1) != -1:
            return power_status['BatteryLifeTime']
    except Exception:
        pass
    return None

def format_time(seconds):
    hours, remainder = divmod(seconds, 3600)
    mins = remainder // 60
    return f"{hours}—á {mins}–º–∏–Ω" if hours > 0 else f"{mins}–º–∏–Ω"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    battery = psutil.sensors_battery()
    if battery is None:
        await update.message.reply_text("‚ùå –î–∞—Ç—á–∏–∫ –±–∞—Ç–∞—Ä–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await update.message.reply_text(
        "üîã Battery Bot - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏\n"
        "–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n" + format_battery_status(battery)
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    battery = psutil.sensors_battery()
    if battery is None:
        await update.message.reply_text("‚ùå –î–∞—Ç—á–∏–∫ –±–∞—Ç–∞—Ä–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await update.message.reply_text(
        "üîã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏:\n" + format_battery_status(battery)
    )

async def notify_startup(context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(chat_id=CHAT_ID, text="üü¢ –ù–æ—É—Ç–±—É–∫ –≤–∫–ª—é—á—ë–Ω –∏–ª–∏ –≤—ã—à–µ–ª –∏–∑ —Å–Ω–∞. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    except Exception:
        pass

def main():
    os.makedirs(os.path.dirname(DATA_FILE) or '.', exist_ok=True)

    app = Application.builder().token(TOKEN).build()
    app.bot_data['battery_data'] = BatteryBotData.load()

    app.job_queue.run_repeating(
        update_battery_message,
        interval=CHECK_INTERVAL,   # –≤—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–æ–±–æ–ª—å—à–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 600 (10 –º–∏–Ω—É—Ç)
        first=10,
        job_kwargs={'misfire_grace_time': 300, 'coalesce': True}
    )

    app.job_queue.run_once(notify_startup, when=1)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status_command))

    print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    app.run_polling()

if __name__ == "__main__":
    main()
